Python is an easy to learn, powerful programming language.” Those are the first words
of the official Python Tutorial. That is true, but there is a catch: because the language is
easy to learn and put to use, many practicing Python programmers leverage only a
fraction of its powerful features.
An experienced programmer may start writing useful Python code in a matter of hours.
As the first productive hours become weeks and months, a lot of developers go on
writing Python code with a very strong accent carried from languages learned before.
Even if Python is your first language, often in academia and in introductory books it is
presented while carefully avoiding language-specific features.
As a teacher introducing Python to programmers experienced in other languages, I see
another problem that this book tries to address: we only miss stuff we know about.
Coming from another language, anyone may guess that Python supports regular ex‐
pressions, and look that up in the docs. But if you’ve never seen tuple unpacking or
descriptors before, you will probably not search for them, and may end up not using
those features just because they are specific to Python.
This book is not an A-to-Z exhaustive reference of Python. Its emphasis is on the lan‐
guage features that are either unique to Python or not found in many other popular
languages. This is also mostly a book about the core language and some of its libraries.
I will rarely talk about packages that are not in the standard library, even though the
Python package index now lists more than 60,000 libraries and many of them are in‐
credibly useful.
Who This Book Is For
This book was written for practicing Python programmers who want to become pro‐
ficient in Python 3. If you know Python 2 but are willing to migrate to Python 3.4 or
later, you should be fine. At the time of this writing, the majority of professional Python
programmers are using Python 2, so I took special care to highlight Python 3 features
that may be new to that audience.
However, Fluent Python is about making the most of Python 3.4, and I do not spell out
the fixes needed to make the code work in earlier versions. Most examples should run
in Python 2.7 with little or no changes, but in some cases, backporting would require
significant rewriting.
Having said that, I believe this book may be useful even if you must stick with Python
2.7, because the core concepts are still the same. Python 3 is not a new language, and
most differences can be learned in an afternoon. What’s New in Python 3.0 is a good
starting point. Of course, there have been changes since Python 3.0 was released in 2009,
but none as important as those in 3.0.
If you are not sure whether you know enough Python to follow along, review the topics
of the official Python Tutorial. Topics covered in the tutorial will not be explained here,
except for some features that are new in Python 3.
Who This Book Is Not For
If you are just learning Python, this book is going to be hard to follow. Not only that, if
you read it too early in your Python journey, it may give you the impression that every
Python script should leverage special methods and metaprogramming tricks. Premature
abstraction is as bad as premature optimization.
How This Book Is Organized
The core audience for this book should not have trouble jumping directly to any chapter
in this book. However, each of the six parts forms a book within the book. I conceived
the chapters within each part to be read in sequence.
I tried to emphasize using what is available before discussing how to build your own.
For example, in Part II, Chapter 2 covers sequence types that are ready to use, including
some that don’t get a lot of attention, like collections.deque. Building user-defined
sequences is only addressed in Part IV, where we also see how to leverage the abstract
base classes (ABCs) from collections.abc. Creating your own ABCs is discussed even
later in Part IV, because I believe it’s important to be comfortable using an ABC before
writing your own.
This approach has a few advantages. First, knowing what is ready to use can save you
from reinventing the wheel. We use existing collection classes more often than we im‐
plement our own, and we can give more attention to the advanced usage of available
tools by deferring the discussion on how to create new ones. We are also more likely to
inherit from existing ABCs than to create a new ABC from scratch. And finally, I believe
it is easier to understand the abstractions after you’ve seen them in action.
The downside of this strategy are the forward references scattered throughout the
chapters. I hope these will be easier to tolerate now that you know why I chose this path.
Here are the main topics in each part of the book:
Part I
A single chapter about the Python data model explaining how the special methods
(e.g., __repr__) are the key to the consistent behavior of objects of all types—in a
language that is admired for its consistency. Understanding various facets of the
data model is the subject of most of the rest of the book, but Chapter 1 provides a
high-level overview.
Part II
The chapters in this part cover the use of collection types: sequences, mappings,
and sets, as well as the str versus bytes split—the cause of much celebration among
Python 3 users and much pain for Python 2 users who have not yet migrated their
code bases. The main goals are to recall what is already available and to explain
some behavior that is sometimes surprising, like the reordering of dict keys when
we are not looking, or the caveats of locale-dependent Unicode string sorting. To
achieve these goals, the coverage is sometimes high level and wide (e.g., when many
variations of sequences and mappings are presented) and sometimes deep (e.g.,
when we dive into the hash tables underneath the dict and set types).
Part III
Here we talk about functions as first-class objects in the language: what that means,
how it affects some popular design patterns, and how to implement function dec‐
orators by leveraging closures. Also covered here is the general concept of callables
in Python, function attributes, introspection, parameter annotations, and the new
nonlocal declaration in Python 3.
Part IV
Now the focus is on building classes. In Part II, the class declaration appears in
few examples; Part IV presents many classes. Like any object-oriented (OO) lan‐
guage, Python has its particular set of features that may or may not be present in
the language in which you and I learned class-based programming. The chapters
explain how references work, what mutability really means, the lifecycle of instan‐
Preface | xvii
WOW! eBook 
www.wowebook.org
ces, how to build your own collections and ABCs, how to cope with multiple in‐
heritance, and how to implement operator overloading—when that makes sense.
Part V
Covered in this part are the language constructs and libraries that go beyond se‐
quential control flow with conditionals, loops, and subroutines. We start with gen‐
erators, then visit context managers and coroutines, including the challenging but
powerful new yield from syntax. Part V closes with a high-level introduction to
modern concurrency in Python with collections.futures (using threads and
processes under the covers with the help of futures) and doing event-oriented I/O
with asyncio (leveraging futures on top of coroutines and yield from).
Part VI
This part starts with a review of techniques for building classes with attributes
created dynamically to handle semi-structured data such as JSON datasets. Next,
we cover the familiar properties mechanism, before diving into how object attribute
access works at a lower level in Python using descriptors. The relationship between
functions, methods, and descriptors is explained. Throughout Part VI, the step-bystep implementation of a field validation library uncovers subtle issues that lead to
the use of the advanced tools of the final chapter: class decorators and metaclasses.